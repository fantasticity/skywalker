SkyWalker
==============

### Introduce

SkyWalker(以下简称SW)是一个代理转发程序，可以配置传入和传出协议。

比如一个典型的Shadowsocks代理可以通过两个不同配置的SW来实现。

第一个SW配置成接受SOCKS5协议的数据，传出Shadowsocks协议的数据，

第二个SW配置成接受Shadowsocks协议的数据，传出纯数据。

同样的，如果你想通过Shadowsocks使用HTTP代理，那么只要把第一个SW配置成接受HTTP代理数据就可以。

### Protocol

目前支持的协议有

*   sock4/5
*   shadowsocks
*   http

### Usage

SW可以通过配置达到不同的代理效果，不过目前支持的协议还有限。

*    sock5代理的配置：
```javascript
    {
        "bindAddr": "0.0.0.0",
        "bindPort": 23455,
        "clientProtocol": "socks",
        "clientConfig": {
            "version": 5
        },
        "serverProtocol": "direct",
        "serverConfig": {
        }
    }
```

*   shadowsocks本地代理的配置：
```javascript
    {
        "bindAddr": "0.0.0.0",
        "bindPort": 12345,
        "clientProtocol": "socks",
        "clientConfig": {
            "version": 5
        },
        "serverProtocol": "shadowsocks",
        "serverConfig": {
            "serverAddr": "example.com",
            "serverPort": 23456,
            "password": "sspassword",
            "method": "aes-256-cfb"
        }
    }
```

*    http转shadowsocks代理：
```javascript
    {
        "bindAddr": "127.0.0.1",
        "bindPort": 12345,
        "clientProtocol": "http",
        "serverProtocol": "shadowsocks",
        "serverConfig": {
            "serverAddr": "example.com",
            "serverPort": 23456,
            "password": "sspassword",
            "method": "aes-256-cfb"
        }
    }
```

*    shadowsocks服务端代理的配置
```javascript
    {
        "bindAddr": "0.0.0.0",
        "bindPort": 23456,
        "clientProtocol": "shadowsocks",
        "clientConfig": {
            "password": "sspassword",
            "method": "aes-256-cfb"
        },
        "serverProtocol": "direct",
        "serverConfig": {
        }
    }
```

*    多服务配置
```javascript
    {
        "name": "main",
        "bindAddr": "0.0.0.0",
        "bindPort": 12345,
        "clientProtocol": "socks",
        "serverProtocol": "shadowsocks",
        "serverConfig": {
            "serverAddr": "example.com",
            "serverPort": 23456,
            "password": "sspassword",
            "method": "aes-256-cfb"
        },
        "extra":[{
            "name": "http",
            "serverPort": 12346,
            "clientProtocol": "http"
        },{
            "name": "http2",
            "serverPort": 12347,
            "clientProtocol": "http",
            "clientConfig": {
                "username": "h",
                "password": "ttp"
            },
            "serverProtocol": "direct"
        }]
    }
```

多服务配置可以根据主配置简化。

上述配置示例中配置了了三个服务，第一个服务是典型的Shadowsocks服务；

第二个服务是HTTP代理服务，但转SS输出，它的ServerProtocol和ServerConfig继承main配置。

第三个服务是直接的HTTP代理，并且配置了用户名密码。


### Development

项目还在开发中，后续会增加支持的协议，以及完善现有的协议。
